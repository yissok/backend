---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  FRONTENDJWSSECRET:
    Description: a
    Type: String
  FRONTENDENCRYPTIONKEY:
    Description: a
    Type: String
  FRONTENDAPPPASSWORD:
    Description: a
    Type: String
  FRONTENDANDREAADMINEMAIL:
    Description: a
    Type: String
  FRONTENDADMINSENDEREMAIL:
    Description: a
    Type: String
  DBMONGOUSERPASSWORD:
    Description: a
    Type: String
  DBUSERNAME:
    Description: a
    Type: String

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  MySubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a'  # Modify as needed
      Tags:
        - Key: 'Name'
          Value: 'MySubnet'

  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda function and EC2 instance'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: 'Name'
          Value: 'MySecurityGroup'

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'MyInternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  MyDefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

#  ApiGatewayVPCEndpoint:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      VpcId: !Ref MyVPC
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
#      SecurityGroupIds:
#        - !GetAtt MySecurityGroup.GroupId
#      SubnetIds:
#        - !Ref MySubnet  # Ensure the VPC endpoint is in MySubnet
#      VpcEndpointType: Interface
  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   IF WE CREATE THIS ONE AT THE SAME TIME IT WONT WORK

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0cb6fec6f40971379'  # Specify your AMI ID
      InstanceType: 't4g.nano'  # Set instance type to t4g.nano
      KeyName: 'luigi'  # Specify your key pair name
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash
              echo "haro everynyan"
              set -e
              curl -sL https://deb.nodesource.com/setup_16.x | bash -
              sudo apt install nodejs
              node -v
              npm -v
              git clone https://github.com/yissok/node-bastion.git
              cd node-bastion
              npm install 
              npm start #implicit here is that node will use all FRONTEND_* secret variables
            - FRONTEND_ADMIN_SENDER_EMAIL: !Ref FRONTEND_ADMIN_SENDER_EMAIL
            - FRONTEND_APP_PASSWORD: !Ref FRONTEND_APP_PASSWORD
            - FRONTEND_ANDREA_ADMIN_EMAIL: !Ref FRONTEND_ANDREA_ADMIN_EMAIL
            - FRONTEND_ENCRYPTION_KEY: !Ref FRONTEND_ENCRYPTION_KEY
            - FRONTEND_JWS_SECRET: !Ref FRONTEND_JWS_SECRET
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref MySubnet
          GroupSet:
            - !Ref MySecurityGroup

  MyRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MyApiGatewayVpcLink:
    Type: 'AWS::ApiGatewayV2::VpcLink'
    DependsOn: ServerlessRestApi
    Properties:
      Name: 'MyApiGatewayVpcLink'
      SubnetIds:
        - !Ref MySubnet
      SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId

  ServerlessRestApiDeploymentANDREA:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ServerlessRestApi
      StageName: Stage

  BackendApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: andreaciao
        S3Key: my-project/deployments/latest/demo-0.0.1-SNAPSHOT.zip
      Handler: com.example.demo.StreamLambdaHandler::handleRequest
      MemorySize: 2048
      Role:
        Fn::GetAtt:
          - BackendApiFunctionRole
          - Arn
      Runtime: java21
      Timeout: 30
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: backend
          JAVA_TOOL_OPTIONS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
          MONGODB_PASSWORD: dummy-pass
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions

  BackendApiFunctionHelloWorldPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: BackendApiFunctionAliasproduction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/*
          - __ApiId__:
              Ref: ServerlessRestApi
            __Stage__: "*"

  BackendApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

      Policies:
        - PolicyName: cwpol
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  BackendApiFunctionVersionANDREA:
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    Properties:
      FunctionName:
        Ref: BackendApiFunction

  ServerlessRestApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ServerlessRestApiDeploymentANDREA
      RestApiId:
        Ref: ServerlessRestApi
      StageName: Prod

  BackendApiFunctionAliasproduction:
    Type: AWS::Lambda::Alias
    Properties:
      Name: production
      FunctionName:
        Ref: BackendApiFunction
      FunctionVersion:
        Fn::GetAtt:
          - BackendApiFunctionVersionANDREA
          - Version

  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - PRIVATE
      Policy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "execute-api:/*/*/*",
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpc": "${MyVPC}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "execute-api:/*/*/*"
            }
          ]
        }
      Body:
        info:
          version: '1.0'
          title:
            Ref: AWS::StackName
        paths:
          "/{proxy+}":
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendApiFunctionAliasproduction}/invocations
              responses: {}
        swagger: '2.0'

