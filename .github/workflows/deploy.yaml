name: Deploy to S3

on:
  push:
    branches:
      - java
      - create-cf
      - update-cf
      - everything

jobs:
  deploy-java:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/java'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt-hotspot'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build and deploy Spring Boot application to S3
        run: |
          which java
          java -version          
          ./gradlew clean build
          
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
          
          S3_BUCKET=andreaciao
          
          S3_OBJECT_KEY="my-project/deployments/$(date +'%Y%m%d%H%M%S')"
          
          executable_jar=$(ls build/libs/*-SNAPSHOT.jar)
          
          aws s3 cp "$executable_jar" "s3://$S3_BUCKET/$S3_OBJECT_KEY/$SPRING_BOOT_APP_NAME-executable.jar"
          
          echo "Spring Boot application executable JAR uploaded to S3 successfully."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          SPRING_BOOT_APP_NAME: mario
  deploy-create-cf:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/create-cf'
    steps:
      - name: Create stack from scratch
        run: |
# we need to finish up the stack setup with cli commands since creating it directly through cloudformation proved to not work
# https://stackoverflow.com/questions/64000387/i-cant-access-an-aws-api-gateway-from-inside-a-vpc
# this is a common problem with private apis and couldnt find a solution yet
          aws ec2 describe-vpcs --filters "Name=tag:Name,Values=MyVPC" --query "Vpcs[0].VpcId" --output text
          aws ec2 describe-security-groups  --filters "Name=tag:Name,Values=MySecurityGroup" --query "SecurityGroups[0].GroupId" --output text
          aws ec2 describe-subnets --filters "Name=tag:Name,Values=MySubnet" --query "Subnets[0].SubnetId" --output text
          aws ec2 create-vpc-endpoint \
          --vpc-id vpc-0c4fa9bea900a8ca0 \
          --service-name com.amazonaws.us-east-1.execute-api \
          --subnet-ids subnet-042479f7b4b85aa66 \
          --security-group-ids sg-0c11430eeb2fdf23d \
          --vpc-endpoint-type Interface \
          --tag-specifications 'ResourceType=vpc-endpoint,Tags=[{Key=Name,Value=MyVpce}]'
          aws apigateway get-rest-apis --query "items[?name=='YourApiGatewayName'].id" --output text
          vpceId=$(aws ec2 describe-vpc-endpoints --query "VpcEndpoints[?Tags[?Key=='Name' && Value=='MyVpce']].VpcEndpointId" --output text)
          aws apigateway update-rest-api \
          --rest-api-id mc5jjk7dl3 \
          --patch-operations "op='add',path='/endpointConfiguration/vpcEndpointIds',value='vpce-02dfcc4e2ec43b8f6'" \
          --region us-east-1



